apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"



    defaultConfig {
    applicationId "com.android.inputmethod.latin"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 100
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Enabling multidex support.
        multiDexEnabled true


        ndk {
            moduleName "jni_latinime"
//            cFlags "-Isrc/main/jni/src -I${project.buildDir}/../src/main/jni/inc -I/Users/xiqiandong/Library/Android/sdk/ndk-bundle/platforms/android-23/arch-arm64/usr/include -I/Users/xiqiandong/Library/Android/sdk/ndk-bundle//sources/cxx-stl/llvm-libc++/libcxx/include/"

        }
    }
    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        //jniLibs.srcDir '' // This is not necessary unless you have precompiled libraries in your project.

    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=0',
                'FLAG_DBG=false',
                'FLAG_DO_PROFILE=false',
                'NDK_APP_LIBS_OUT='+file('src/main/jnilibs').absolutePath
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'
    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn buildNative
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            jniDebuggable false
            debuggable    false
        }
        debug {
            jniDebuggable true
            debuggable   true
        }
    }
    aaptOptions {
        noCompress "dict"
    }

}

dependencies {
    //    compile 'com.android.support:appcompat-v7:23.+'
    compile 'com.android.support:support-v4:23.3.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile files('libs/jsr305-1.3.9.jar')
    testCompile 'junit:junit:4.12'
    androidTestCompile 'junit:junit:4.12'
    //    testCompile "org.mockito:mockito-core:1.9.5"
    //    androidTestCompile "org.mockito:mockito-core:1.9.5"
    //    androidTestCompile "com.crittercism.dexmaker:dexmaker:1.4"
    //    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:1.4"
    //    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:1.4"
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    //    // Optional -- Hamcrest library
    androidTestCompile 'com.android.support.test:rules:0.5'
    //    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    //    // Optional -- UI testing with Espresso
    //    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    //    // Optional -- UI testing with UI Automator
    //    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}
